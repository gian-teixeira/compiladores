Token { lexeme: "fn", _type: Function, line: 1 }
Token { lexeme: "calculadora", _type: Id, line: 1 }
Token { lexeme: "(", _type: LBracket, line: 1 }
Token { lexeme: "op", _type: Id, line: 1 }
Token { lexeme: ":", _type: Colon, line: 1 }
Token { lexeme: "char", _type: Char, line: 1 }
Token { lexeme: ",", _type: Comma, line: 1 }
Token { lexeme: "x", _type: Id, line: 1 }
Token { lexeme: ":", _type: Colon, line: 1 }
Token { lexeme: "float", _type: Float, line: 1 }
Token { lexeme: ",", _type: Comma, line: 1 }
Token { lexeme: "y", _type: Id, line: 1 }
Token { lexeme: ":", _type: Colon, line: 1 }
Token { lexeme: "float", _type: Float, line: 1 }
Token { lexeme: ")", _type: RBracket, line: 1 }
Token { lexeme: "->", _type: Arrow, line: 1 }
Token { lexeme: "float", _type: Float, line: 1 }
Token { lexeme: "{", _type: LBrace, line: 1 }
Token { lexeme: "if", _type: If, line: 2 }
Token { lexeme: "op", _type: Id, line: 2 }
Token { lexeme: "==", _type: EQ, line: 2 }
Token { lexeme: "'+'", _type: CharConst, line: 2 }
Token { lexeme: "{", _type: LBrace, line: 2 }
Token { lexeme: "return", _type: Return, line: 3 }
Token { lexeme: "x", _type: Id, line: 3 }
Token { lexeme: "+", _type: Plus, line: 3 }
Token { lexeme: "y", _type: Id, line: 3 }
Token { lexeme: ";", _type: PComma, line: 3 }
Token { lexeme: "}", _type: RBrace, line: 4 }
Token { lexeme: "else", _type: Else, line: 5 }
Token { lexeme: "if", _type: If, line: 5 }
Token { lexeme: "op", _type: Id, line: 5 }
Token { lexeme: "==", _type: EQ, line: 5 }
Token { lexeme: "'-'", _type: CharConst, line: 5 }
Token { lexeme: "{", _type: LBrace, line: 5 }
Token { lexeme: "return", _type: Return, line: 6 }
Token { lexeme: "x", _type: Id, line: 6 }
Token { lexeme: "-", _type: Minus, line: 6 }
Token { lexeme: "y", _type: Id, line: 6 }
Token { lexeme: ";", _type: PComma, line: 6 }
Token { lexeme: "}", _type: RBrace, line: 7 }
Token { lexeme: "else", _type: Else, line: 8 }
Token { lexeme: "if", _type: If, line: 8 }
Token { lexeme: "op", _type: Id, line: 8 }
Token { lexeme: "==", _type: EQ, line: 8 }
Token { lexeme: "'*'", _type: CharConst, line: 8 }
Token { lexeme: "{", _type: LBrace, line: 8 }
Token { lexeme: "return", _type: Return, line: 9 }
Token { lexeme: "x", _type: Id, line: 9 }
Token { lexeme: "*", _type: Mult, line: 9 }
Token { lexeme: "y", _type: Id, line: 9 }
Token { lexeme: ";", _type: PComma, line: 9 }
Token { lexeme: "}", _type: RBrace, line: 10 }
Token { lexeme: "else", _type: Else, line: 11 }
Token { lexeme: "if", _type: If, line: 11 }
Token { lexeme: "op", _type: Id, line: 11 }
Token { lexeme: "==", _type: EQ, line: 11 }
Token { lexeme: "'/'", _type: CharConst, line: 11 }
Token { lexeme: "{", _type: LBrace, line: 11 }
Token { lexeme: "if", _type: If, line: 12 }
Token { lexeme: "y", _type: Id, line: 12 }
Token { lexeme: "==", _type: EQ, line: 12 }
Token { lexeme: "0", _type: IntConst, line: 12 }
Token { lexeme: "{", _type: LBrace, line: 12 }
Token { lexeme: "return", _type: Return, line: 13 }
Token { lexeme: "0.0", _type: FloatConst, line: 13 }
Token { lexeme: ";", _type: PComma, line: 13 }
Token { lexeme: "}", _type: RBrace, line: 14 }
Token { lexeme: "return", _type: Return, line: 15 }
Token { lexeme: "x", _type: Id, line: 15 }
Token { lexeme: "/", _type: Div, line: 15 }
Token { lexeme: "y", _type: Id, line: 15 }
Token { lexeme: ";", _type: PComma, line: 15 }
Token { lexeme: "}", _type: RBrace, line: 16 }
Token { lexeme: "return", _type: Return, line: 17 }
Token { lexeme: "0.0", _type: FloatConst, line: 17 }
Token { lexeme: ";", _type: PComma, line: 17 }
Token { lexeme: "}", _type: RBrace, line: 18 }
Token { lexeme: "fn", _type: Function, line: 20 }
Token { lexeme: "main", _type: Main, line: 20 }
Token { lexeme: "(", _type: LBracket, line: 20 }
Token { lexeme: ")", _type: RBracket, line: 20 }
Token { lexeme: "{", _type: LBrace, line: 20 }
Token { lexeme: "let", _type: Let, line: 21 }
Token { lexeme: "a", _type: Id, line: 21 }
Token { lexeme: ",", _type: Comma, line: 21 }
Token { lexeme: "b", _type: Id, line: 21 }
Token { lexeme: ":", _type: Colon, line: 21 }
Token { lexeme: "float", _type: Float, line: 21 }
Token { lexeme: ";", _type: PComma, line: 21 }
Token { lexeme: "a", _type: Id, line: 22 }
Token { lexeme: "=", _type: Attr, line: 22 }
Token { lexeme: "1.8", _type: FloatConst, line: 22 }
Token { lexeme: ";", _type: PComma, line: 22 }
Token { lexeme: "b", _type: Id, line: 23 }
Token { lexeme: "=", _type: Attr, line: 23 }
Token { lexeme: "7.2", _type: FloatConst, line: 23 }
Token { lexeme: ";", _type: PComma, line: 23 }
Token { lexeme: "println", _type: Println, line: 24 }
Token { lexeme: "(", _type: LBracket, line: 24 }
Token { lexeme: "\"{}\"", _type: FormatString, line: 24 }
Token { lexeme: ",", _type: Comma, line: 24 }
Token { lexeme: "calculadora", _type: Id, line: 24 }
Token { lexeme: "(", _type: LBracket, line: 24 }
Token { lexeme: "'*'", _type: CharConst, line: 24 }
Token { lexeme: ",", _type: Comma, line: 24 }
Token { lexeme: "a", _type: Id, line: 24 }
Token { lexeme: ",", _type: Comma, line: 24 }
Token { lexeme: "b", _type: Id, line: 24 }
Token { lexeme: ")", _type: RBracket, line: 24 }
Token { lexeme: ")", _type: RBracket, line: 24 }
Token { lexeme: ";", _type: PComma, line: 24 }
Token { lexeme: "}", _type: RBrace, line: 25 }
