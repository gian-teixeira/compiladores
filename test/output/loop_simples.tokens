Token { lexeme: "fn", _type: Function, line: 1 }
Token { lexeme: "main", _type: Main, line: 1 }
Token { lexeme: "(", _type: LBracket, line: 1 }
Token { lexeme: ")", _type: RBracket, line: 1 }
Token { lexeme: "{", _type: LBrace, line: 1 }
Token { lexeme: "let", _type: Let, line: 2 }
Token { lexeme: "i", _type: Id, line: 2 }
Token { lexeme: ":", _type: Colon, line: 2 }
Token { lexeme: "int", _type: Int, line: 2 }
Token { lexeme: ";", _type: PComma, line: 2 }
Token { lexeme: "i", _type: Id, line: 3 }
Token { lexeme: "=", _type: Attr, line: 3 }
Token { lexeme: "0", _type: IntConst, line: 3 }
Token { lexeme: ";", _type: PComma, line: 3 }
Token { lexeme: "while", _type: While, line: 4 }
Token { lexeme: "i", _type: Id, line: 4 }
Token { lexeme: "<", _type: LT, line: 4 }
Token { lexeme: "10", _type: IntConst, line: 4 }
Token { lexeme: "{", _type: LBrace, line: 4 }
Token { lexeme: "println", _type: Println, line: 5 }
Token { lexeme: "(", _type: LBracket, line: 5 }
Token { lexeme: "{}", _type: FormatString, line: 5 }
Token { lexeme: ",", _type: Comma, line: 5 }
Token { lexeme: "i", _type: Id, line: 5 }
Token { lexeme: ")", _type: RBracket, line: 5 }
Token { lexeme: ";", _type: PComma, line: 5 }
Token { lexeme: "i", _type: Id, line: 6 }
Token { lexeme: "=", _type: Attr, line: 6 }
Token { lexeme: "i", _type: Id, line: 6 }
Token { lexeme: "+", _type: Plus, line: 6 }
Token { lexeme: "1", _type: IntConst, line: 6 }
Token { lexeme: ";", _type: PComma, line: 6 }
Token { lexeme: "}", _type: RBrace, line: 7 }
Token { lexeme: "}", _type: RBrace, line: 8 }
Token { lexeme: "", _type: EOF, line: -1 }
